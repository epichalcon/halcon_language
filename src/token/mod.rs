use core::fmt::Display;

use strum_macros::EnumString;

#[derive(EnumString, Clone, Debug, PartialEq, Hash, Eq)]
pub enum Token {
    Id(String),
    ConstInt(i128),
    ConstStr(String),
    ConstBool(bool),

    Int,
    Str,
    Bool,
    Float,
    Arr,

    Plus,
    Minus,
    Mult,
    Div,
    Mod,

    Eq,
    Neq,
    Lt,
    Gt,
    Le,
    Ge,

    And,
    Or,
    Not,

    Inc,
    Dec,

    Assig,
    SumAsig,
    MinAsig,
    MulAsig,
    DivAsig,

    Fun,
    Let,
    Arrow,
    Return,
    Raw,
    Begin,
    If,
    Elif,
    Else,
    For,
    Loop,
    While,

    Input,
    Print,

    Coma,
    Semicolon,
    Colon,

    Opar,
    Cpar,
    Obrac,
    Cbrac,
    Okey,
    Ckey,

    Eof,
    Invalid(String),
}

impl Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Token::Id(x) => write!(f, "Id({})", x),
            Token::ConstInt(x) => write!(f, "ConstInt({})", x),
            Token::ConstStr(x) => write!(f, "ConstStr({})", x),
            Token::ConstBool(x) => write!(f, "ConstBool({})", x),
            Token::Invalid(x) => write!(f, "Invalid({})", x),
            Token::Int => write!(f, "int"),
            Token::Str => write!(f, "str"),
            Token::Bool => write!(f, "bool"),
            Token::Float => write!(f, "float"),
            Token::Arr => write!(f, "arr"),
            Token::Plus => write!(f, "+"),
            Token::Minus => write!(f, "-"),
            Token::Mult => write!(f, "*"),
            Token::Div => write!(f, "/"),
            Token::Mod => write!(f, "%"),
            Token::Eq => write!(f, "=="),
            Token::Neq => write!(f, "!="),
            Token::Lt => write!(f, "<"),
            Token::Gt => write!(f, ">"),
            Token::Le => write!(f, "<="),
            Token::Ge => write!(f, ">="),
            Token::And => write!(f, "and"),
            Token::Or => write!(f, "or"),
            Token::Not => write!(f, "not"),
            Token::Inc => write!(f, "++"),
            Token::Dec => write!(f, "--"),
            Token::Assig => write!(f, "="),
            Token::SumAsig => write!(f, "+="),
            Token::MinAsig => write!(f, "-="),
            Token::MulAsig => write!(f, "*="),
            Token::DivAsig => write!(f, "/="),
            Token::Fun => write!(f, "fun"),
            Token::Let => write!(f, "let"),
            Token::Arrow => write!(f, "->"),
            Token::Return => write!(f, "return"),
            Token::Raw => write!(f, "Raw"),
            Token::Begin => write!(f, "Begin"),
            Token::If => write!(f, "if"),
            Token::Elif => write!(f, "elif"),
            Token::Else => write!(f, "else"),
            Token::For => write!(f, "for"),
            Token::Loop => write!(f, "loop"),
            Token::While => write!(f, "while"),
            Token::Input => write!(f, "input"),
            Token::Print => write!(f, "print"),
            Token::Coma => write!(f, ","),
            Token::Semicolon => write!(f, ";"),
            Token::Colon => write!(f, ":"),
            Token::Opar => write!(f, "("),
            Token::Cpar => write!(f, ")"),
            Token::Obrac => write!(f, "["),
            Token::Cbrac => write!(f, "]"),
            Token::Okey => write!(f, "{{"),
            Token::Ckey => write!(f, "}}"),
            Token::Eof => write!(f, "eof"),
        }
    }
}
